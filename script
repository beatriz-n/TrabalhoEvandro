------------- 1 ------------
select
'
CREATE DATABASE trabalho
    WITH
    OWNER = postgres  
    CONNECTION LIMIT = -1;
'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'trabalho')\gexec
ALTER DATABASE trabalho SET datestyle TO 'ISO, DMY';

CREATE TABLE paciente (
    id_paciente INTEGER PRIMARY KEY,
    codigo NUMERIC UNIQUE,
    nome VARCHAR(50),
    idade NUMERIC
);

CREATE TABLE medico (
    id_medico INTEGER PRIMARY KEY,
    crm NUMERIC UNIQUE,
    nome VARCHAR(50),
    especialidade VARCHAR
);

CREATE TABLE atende (
    id_atende INTEGER PRIMARY KEY,
    id_paciente INTEGER,
    id_medico INTEGER,
    data_consulta DATE,
    FOREIGN KEY (id_paciente) REFERENCES paciente(id_paciente),
    FOREIGN KEY (id_medico) REFERENCES medico(id_medico)
);

CREATE TABLE cirurgia (
    id_cirurgia INTEGER PRIMARY KEY,
    codigo NUMERIC UNIQUE,
    data_consulta DATE,
    descricao VARCHAR,
    id_paciente INTEGER,
    FOREIGN KEY (id_paciente) REFERENCES paciente(id_paciente)
);

CREATE SEQUENCE sid_cirurgia;
CREATE SEQUENCE sid_paciente;
CREATE SEQUENCE sid_medico;
CREATE SEQUENCE sid_atende;

INSERT INTO paciente (id_paciente, codigo, nome, idade) VALUES
(nextval('sid_paciente'), 123456, 'João', 35),
(nextval('sid_paciente'), 789012, 'Maria', 28),
(nextval('sid_paciente'), 345678, 'Pedro', 42),
(nextval('sid_paciente'), 901234, 'Ana', 50),
(nextval('sid_paciente'), 567890, 'Mariana', 31),
(nextval('sid_paciente'), 432109, 'Carlos', 47);

-- Inserções na tabela medico
INSERT INTO medico (id_medico, crm, nome, especialidade) VALUES
(nextval('sid_medico'), 987654, 'Dr. Silva', 'Clínico Geral'),
(nextval('sid_medico'), 654321, 'Dr. Santos', 'Pediatra'),
(nextval('sid_medico'), 210987, 'Dra. Oliveira', 'Ginecologista'),
(nextval('sid_medico'), 876543, 'Dr. Almeida', 'Cardiologista'),
(nextval('sid_medico'), 543210, 'Dra. Costa', 'Dermatologista'),
(nextval('sid_medico'), 109876, 'Dr. Pereira', 'Ortopedista');

-- Inserções na tabela atende
INSERT INTO atende (id_atende, id_paciente, id_medico, data_consulta) VALUES
(nextval('sid_atende'), 1, 1, '2024-04-01'),
(nextval('sid_atende'), 2, 2, '2024-04-02'),
(nextval('sid_atende'), 3, 3, '2024-04-03'),
(nextval('sid_atende'), 4, 4, '2024-04-04'),
(nextval('sid_atende'), 5, 5, '2024-04-05'),
(nextval('sid_atende'), 6, 6, '2024-04-06');

-- Inserções na tabela cirurgia
INSERT INTO cirurgia (id_cirurgia, codigo, data_consulta, descricao, id_paciente) VALUES
(nextval('sid_cirurgia'), 123, '2024-04-10', 'Cirurgia de apendicite', 1),
(nextval('sid_cirurgia'), 456, '2024-04-15', 'Cirurgia de hérnia', 2),
(nextval('sid_cirurgia'), 789, '2024-04-20', 'Cirurgia de catarata', 3),
(nextval('sid_cirurgia'), 321, '2024-04-25', 'Cirurgia cardíaca', 4),
(nextval('sid_cirurgia'), 654, '2024-04-30', 'Cirurgia plástica', 5),
(nextval('sid_cirurgia'), 987, '2024-05-05', 'Cirurgia de joelho', 6);

------------------2------------------
CREATE OR REPLACE FUNCTION criar_cirurgia(codigo_cirurgia numeric, codigo_paciente numeric, data_cirurgia date, descricao_cirurgia varchar)
	RETURNS VOID AS
	$$
	DECLARE
		paciente_id INTEGER;
		cirurgia_id INTEGER;
	BEGIN
		SELECT id_paciente INTO paciente_id FROM paciente
		WHERE codigo = codigo_paciente;

		SELECT id_cirurgia INTO cirurgia_id FROM cirurgia
		WHERE id_paciente = paciente_id AND 
		data_consulta = data_cirurgia AND 
		descricao = descricao_cirurgia;

		IF paciente_id IS NULL THEN
			RAISE EXCEPTION 'Paciente com o código % não foi encontrado!', codigo_paciente;
		END IF;
	
		IF cirurgia_id IS NOT NULL THEN
			RAISE EXCEPTION 'Cirurgia já marcada para essa data!';
		END IF;

		IF data_cirurgia > CURRENT_DATE THEN
			RAISE EXCEPTION 'A data da cirurgia não pode ser posterior à data atual!';
		END IF;

		INSERT INTO cirurgia (id_cirurgia, codigo, data_consulta, descricao, id_paciente)
		VALUES (nextval('sid_cirurgia'), codigo_cirurgia, data_cirurgia, descricao_cirurgia, paciente_id);
	END;
	$$
	LANGUAGE PLPGSQL;

select criar_cirurgia(100, 123456, '2024-04-06', 'Cirurgia da Coluna');

----------------- 3 ------------------
CREATE OR REPLACE FUNCTION f_verificaIntervaloData(dataInicio atende.data_consulta%type, dataFim atende.data_consulta%type)
RETURNS SETOF RECORD
AS $$
DECLARE
    result RECORD;
BEGIN
    FOR result IN
        SELECT m.nome as nome_medico,
               COUNT(at.id_atende) as contador
        FROM atende at
        INNER JOIN medico m ON m.id_medico = at.id_medico
        WHERE at.data_consulta BETWEEN dataInicio AND dataFim
        GROUP BY m.nome
        ORDER BY m.nome
    LOOP
        RETURN NEXT result;
    END LOOP;

    IF NOT FOUND THEN
        RAISE 'Intervalo da data % não foi encontrado', dataInicio USING ERRCODE = 'ERR01';
    END IF;
END;
$$ LANGUAGE plpgsql;

uso: SELECT * FROM f_verificaIntervaloData('2024-01-01', '2024-12-31') AS (nome_medico VARCHAR, contador BIGINT);

----------------- 4 -----------------

create or replace 
 function f_checaRegras() returns TRIGGER
as $$
declare 
	dataAtende atende.data_consulta%type;

begin
    select data_consulta into dataAtende
	from atende WHERE id_paciente = new.id_paciente;
--RAISE NOTICE 'Valor de dataAtende: %', dataAtende;
    if (new.data_consulta > CURRENT_DATE) THEN

         raise 'Data é maior do que a recorrente'
            using ERRCODE = 'ER003';        
    end if;

    return new;
end;
$$
LANGUAGE plpgsql;

create trigger tr_data_cirurgia
before insert
on cirurgia for each row
execute procedure f_checaRegras();


--exemplo
INSERT INTO cirurgia (id_cirurgia, codigo, data_consulta, descricao, id_paciente) VALUES
(nextval('sid_cirurgia'), 565, '2024-04-06', 'Cirurgia de Miopia', 6);

INSERT INTO cirurgia (id_cirurgia, codigo, data_consulta, descricao, id_paciente) VALUES
(nextval('sid_cirurgia'), 565, '2024-03-12', 'Cirurgia do siso', 6);

select * from cirurgia;

------------------5------------------
Alternativa D

------------------6------------------
Alternativa E

------------------7------------------
Alternativa E